nextflow_pipeline {

    name "Tests of the pipeline with failing options"
    script "main.nf"

    test("Missing required input") {

        when {
            params {
                scatter_count = null
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("* Missing required parameter: --scatter_count")
        }

    }

    test("VCFanno - No required inputs") {

        when {
            params {
                annotate    = true
                vcfanno     = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("A TOML file and resource files should be supplied when using vcfanno (use --vcfanno_config and --vcfanno_resources)")
        }

    }

    test("DBNSFP - No required inputs") {

        when {
            params {
                annotate    = true
                vep_dbnsfp  = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please specify '--vep_dbsnfp true', '--dbnsfp PATH/TO/DBNSFP/FILE' and '--dbnspf_tbi PATH/TO/DBNSFP/INDEX/FILE' to use the dbnsfp VEP plugin.")
        }

    }

    test("SpliceAI - No required inputs") {

        when {
            params {
                annotate        = true
                vep_spliceai    = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please specify '--vep_spliceai true', '--spliceai_snv PATH/TO/SPLICEAI/SNV/FILE', '--spliceai_snv_tbi PATH/TO/SPLICEAI/SNV/INDEX/FILE', '--spliceai_indel PATH/TO/SPLICEAI/INDEL/FILE' and '--spliceai_indel_tbi PATH/TO/SPLICEAI/INDEL/INDEX/FILE' to use the SpliceAI VEP plugin.")
        }

    }


    test("MasterMind - No required inputs") {

        when {
            params {
                annotate        = true
                vep_mastermind  = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please specify '--vep_mastermind true', '--mastermind PATH/TO/MASTERMIND/FILE' and '--mastermind_tbi PATH/TO/MASTERMIND/INDEX/FILE' to use the mastermind VEP plugin.")
        }

    }


    test("EOG - No required inputs") {

        when {
            params {
                annotate    = true
                vep_eog     = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please specify '--vep_eog true', '--eog PATH/TO/EOG/FILE' and '--eog_tbi PATH/TO/EOG/INDEX/FILE' to use the EOG custom VEP plugin.")
        }

    }
}
