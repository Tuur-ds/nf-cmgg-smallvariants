nextflow_workflow {

    name "Test Workflow CRAM_CALL_VARDICTJAVA"
    script "subworkflows/local/cram_call_vardictjava/main.nf"
    workflow "CRAM_CALL_VARDICTJAVA"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "cram_call_vardictjava"
    tag "vcf_concat_bcftools"
    tag "vcf_filter_bcftools"

    test("cram_call_vardictjava - default") {


        when {
            params {
                callers = "vardict"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143"],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143.00001", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24143.00002", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24143.00003", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = [[],[]]
                input[5] = [[],[]]
                input[6] = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } }
                ).match("default") }
            )
        }

    }

    test("cram_call_vardictjava - filter") {


        when {
            params {
                filter = true
                callers = "vardict"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143"],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143.00001", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24143.00002", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24143.00003", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = [[],[]]
                input[5] = [[],[]]
                input[6] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } }
                ).match("filter") }
            )
        }

    }

    test("cram_call_vardictjava - family") {
        // The family should not be merged here

        when {
            params {
                callers = "vardict"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149"],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true)
                ],[
                    [id:"NA24149", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149"],
                    file(params.cram2, checkIfExists:true),
                    file(params.crai2, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143.00001", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24143.00002", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24143.00003", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ],[
                    [id:"NA24149.00001", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149", split_count:3],
                    file(params.cram2, checkIfExists:true),
                    file(params.crai2, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24149.00002", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149", split_count:3],
                    file(params.cram2, checkIfExists:true),
                    file(params.crai2, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24149.00003", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149", split_count:3],
                    file(params.cram2, checkIfExists:true),
                    file(params.crai2, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = [[],[]]
                input[5] = [[],[]]
                input[6] = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } }
                ).match("family") }
            )
        }

    }

}
