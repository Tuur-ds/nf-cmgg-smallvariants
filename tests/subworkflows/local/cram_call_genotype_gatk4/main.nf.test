nextflow_workflow {

    name "Test Workflow CRAM_CALL_GENOTYPE_GATK4"
    script "subworkflows/local/cram_call_genotype_gatk4/main.nf"
    workflow "CRAM_CALL_GENOTYPE_GATK4"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "cram_call_genotype_gatk4"
    tag "cram_call_gatk4" // This is also tested here
    tag "gvcf_joint_genotype_gatk4" // This is also tested here
    tag "vcf_filter_bcftools" // This is also tested here
    tag "vcf_concat_bcftools" // This is also tested here

    test("cram_call_genotype_gatk4 - default - crams") {

        when {
            params {
                callers = "haplotypecaller"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143.00001", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24143.00002", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24143.00003", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", split_count:3],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ])
                input[1] = Channel.empty()
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[5] = Channel.value([
                    [id:"strtablefile"],
                    file(params.strtablefile, checkIfExists:true)
                ])
                input[6] = [[],[]]
                input[7] = [[],[]]
                input[8] = false
                input[9] = false
                input[10] = false
                input[11] = false
                input[12] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } },
                    workflow.out.reports
                ).match("default - crams") }
            )
        }

    }

    test("cram_call_genotype_gatk4 - default - gvcfs") {

        when {
            params {
                callers = "haplotypecaller"
            }
            workflow {
                """
                input[0] = Channel.empty()
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[5] = Channel.value([
                    [id:"strtablefile"],
                    file(params.strtablefile, checkIfExists:true)
                ])
                input[6] = [[],[]]
                input[7] = [[],[]]
                input[8] = false
                input[9] = false
                input[10] = false
                input[11] = false
                input[12] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } },
                    workflow.out.reports
                ).match("default - gvcfs") }
            )
        }

    }

    test("cram_call_genotype_gatk4 - default - family") {

        when {
            params {
                callers = "haplotypecaller"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24835.00001", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24835.00002", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24835.00003", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ],[
                    [id:"NA24149", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385"],
                    file(params.gvcf2, checkIfExists:true),
                    file(params.gtbi2, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[5] = Channel.value([
                    [id:"strtablefile"],
                    file(params.strtablefile, checkIfExists:true)
                ])
                input[6] = [[],[]]
                input[7] = [[],[]]
                input[8] = false
                input[9] = false
                input[10] = false
                input[11] = false
                input[12] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } },
                    workflow.out.reports
                ).match("default - family") }
            )
        }

    }

    test("cram_call_genotype_gatk4 - filter - family") {

        when {
            params {
                callers = "haplotypecaller"
                filter = true
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24835.00001", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24835.00002", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24835.00003", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ],[
                    [id:"NA24149", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385"],
                    file(params.gvcf2, checkIfExists:true),
                    file(params.gtbi2, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[5] = Channel.value([
                    [id:"strtablefile"],
                    file(params.strtablefile, checkIfExists:true)
                ])
                input[6] = [[],[]]
                input[7] = [[],[]]
                input[8] = false
                input[9] = false
                input[10] = false
                input[11] = true
                input[12] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } },
                    workflow.out.reports
                ).match("filter - family") }
            )
        }

    }

    test("cram_call_genotype_gatk4 - only_call - family") {

        when {
            params {
                callers = "haplotypecaller"
                only_call = true
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24835.00001", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24835.00002", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24835.00003", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ],[
                    [id:"NA24149", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385"],
                    file(params.gvcf2, checkIfExists:true),
                    file(params.gtbi2, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[5] = Channel.value([
                    [id:"strtablefile"],
                    file(params.strtablefile, checkIfExists:true)
                ])
                input[6] = [[],[]]
                input[7] = [[],[]]
                input[8] = false
                input[9] = true
                input[10] = false
                input[11] = false
                input[12] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } },
                    workflow.out.reports
                ).match("only_call - family") }
            )
        }

    }

    test("cram_call_genotype_gatk4 - only_merge - family") {

        when {
            params {
                callers = "haplotypecaller"
                only_merge = true
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24835.00001", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24835.00002", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24835.00003", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ],[
                    [id:"NA24149", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149,NA24385"],
                    file(params.gvcf2, checkIfExists:true),
                    file(params.gtbi2, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[5] = Channel.value([
                    [id:"strtablefile"],
                    file(params.strtablefile, checkIfExists:true)
                ])
                input[6] = [[],[]]
                input[7] = [[],[]]
                input[8] = false
                input[9] = false
                input[10] = true
                input[11] = false
                input[12] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } },
                    workflow.out.reports
                ).match("only_merge - family") }
            )
        }

    }

    test("cram_call_genotype_gatk4 - default - sample + family") {

        when {
            params {
                callers = "haplotypecaller"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24835.00001", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split1, checkIfExists:true)
                ],[
                    [id:"NA24835.00002", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split2, checkIfExists:true)
                ],[
                    [id:"NA24835.00003", sample:"NA24835", family:"Ashkenazim", family_samples:"NA24149,NA24385", split_count:3],
                    file(params.cram3, checkIfExists:true),
                    file(params.crai3, checkIfExists:true),
                    file(params.split3, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ],[
                    [id:"NA24149", sample:"NA24149", family:"NA24149", family_samples:"NA24149,NA24385"],
                    file(params.gvcf2, checkIfExists:true),
                    file(params.gtbi2, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[5] = Channel.value([
                    [id:"strtablefile"],
                    file(params.strtablefile, checkIfExists:true)
                ])
                input[6] = [[],[]]
                input[7] = [[],[]]
                input[8] = false
                input[9] = false
                input[10] = false
                input[11] = false
                input[12] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { it.collect { it instanceof Map ? it : file(it).name } },
                    workflow.out.reports
                ).match("only_merge - sample + family") }
            )
        }

    }

}
