/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// Load subworkflow specific configs
includeConfig '../subworkflows/nf-core/bed_scatter_bedtools/nextflow.config'

process {

    def individuals_output = "individuals"
    def final_output = "ready" // The name of the folder containing the final output inside of the output directory

    publishDir = [
        enabled: false
    ]

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        OPTIONAL INPUT CREATION
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: INDEX_TO_BED {
        ext.args2   = '\'BEGIN {FS="\t"}; {print \$1 FS "0" FS \$2}\''
        ext.suffix  = 'bed'
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        GERMLINE VARIANT CALLING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*:GERMLINE_VARIANT_CALLING:CALIBRATEDRAGSTRMODEL\$" {
        ext.args   = ''
    }

    withName: "^.*:GERMLINE_VARIANT_CALLING:HAPLOTYPECALLER\$" {
        publishDir  = [
            overwrite: true,
            enabled: { meta.bed_count <= 1 ? true : false },
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${individuals_output}/${meta.sample}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE if bed count <= 1
        time        = { check_max( 16.h  * task.attempt, 'time' ) }
        cpus        = { check_max( 1     * task.attempt, 'cpus' ) }
        ext.prefix  = {"${meta.id}.g"}
        ext.args    = '-ERC GVCF -contamination "0" -GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90 -G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation --dragen-mode'
    }

    withName: "^.*:GERMLINE_VARIANT_CALLING:BCFTOOLS_CONCAT\$" {
        publishDir  = [
            overwrite: true,
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${individuals_output}/${meta.sample}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE if scatter count > 1
        ext.prefix = { "${meta.id}.g" }
        ext.args   = '-a'
    }

    withName: "^.*:GERMLINE_VARIANT_CALLING:TABIX_GVCFS\$" {
        publishDir = [
            path: { "${params.outdir}/${individuals_output}/${meta.sample}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
        ext.args   = ''
    }

    withName: "^.*:GERMLINE_VARIANT_CALLING:REBLOCKGVCF\$" {
        ext.args   = '-do-qual-approx --floor-blocks -GQB 20 -GQB 30 -GQB 40'
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        PREPROCESSING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*JOINT_GENOTYPING:GENOTYPE_GVCFS\$" {
        ext.args   = '--allow-old-rms-mapping-quality-annotation-data -G StandardAnnotation -G AS_StandardAnnotation -AX ExcessHet -AX InbreedingCoeff'
    }

    withName: "^.*JOINT_GENOTYPING:BCFTOOLS_CONCAT\$" {
        publishDir = [
            overwrite: true,
            enabled: !params.filter,
            path: { "${params.outdir}/${final_output}/${meta.family ?: meta.id}" },
            mode: params.publish_dir_mode,
            saveAs:
            { filename ->
                filename.equals('versions.yml') ? null :
                filename ==~ /^.*\.vcf.gz$/ ? filename : null
            }
        ]
    }

    withName: "^.*JOINT_GENOTYPING:PEDFILTER\$" {
        ext.prefix = { "${meta.id}_pedigree" }
    }

    withName: "^.*:JOINT_GENOTYPING:MERGE_VCF_HEADERS\$" {
        ext.prefix = { "${meta.id}_pedigree_merged" }
    }

    withName: "^.*JOINT_GENOTYPING:BGZIP_PED_VCFS\$" {
        publishDir = [
            overwrite: true,
            enabled: !params.filter,
            path: { "${params.outdir}/${final_output}/${meta.family ?: meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        FILTERING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.filter){
        withName: FILTER_SNPS {
            ext.prefix = { "${meta.id}_filtered_snps" }
            ext.args = '-O v --soft-filter \'GATKCutoffSNP\' -e \'TYPE="snp" && (MQRankSum < -12.5 || ReadPosRankSum < -8.0 || QD < 2.0 || FS > 60.0 || (QD < 10.0 && AD[0:1] / (AD[0:1] + AD[0:0]) < 0.25 && ReadPosRankSum < 0.0) || MQ < 30.0)\' -m \'+\''
        }

        withName: FILTER_INDELS {
            publishDir = [
                overwrite: true,
                path: { "${params.outdir}/${final_output}/${meta.family ?: meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            ext.args = '-O v --soft-filter \'GATKCutoffIndel\' -e \'TYPE="indel" && (ReadPosRankSum < -20.0 || QD < 2.0 || FS > 200.0 || SOR > 10.0 || (QD < 10.0 && AD[0:1] / (AD[0:1] + AD[0:0]) < 0.25 && ReadPosRankSum < 0.0))\' -m \'+\''

        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        SOMALIER
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*:SOMALIER:SOMALIER_RELATE\$" {
        publishDir = [
            overwrite: true,
            path: { "${params.outdir}/${final_output}/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                        filename ==~ /^.*\.html$/ ? "reports/" + filename.replace(".html", "_somalier.html") :
                        filename ==~ /^.*\.samples\.tsv$/ ? filename.replace(".samples.tsv", ".ped") :
                        null
                    }
        ] // SAVE
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        QUALITY CONTROL
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*:VCF_QC:BCFTOOLS_STATS\$" {
        publishDir = [
            overwrite: true,
            path: { "${params.outdir}/${final_output}/${meta.family}/reports" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
    }

    withName: "^.*:VCF_QC:VCFTOOLS_.*\$" {
        publishDir = [
            overwrite: true,
            path: { "${params.outdir}/${final_output}/${meta.family}/reports" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
    }

    withName: "^.*:VCF_QC:VCFTOOLS_TSTV_COUNT\$" {
        ext.args = "--TsTv-by-count"
    }

    withName: "^.*:VCF_QC:VCFTOOLS_TSTV_QUAL\$" {
        ext.args = "--TsTv-by-qual"
    }

    withName: "^.*:VCF_QC:VCFTOOLS_SUMMARY\$" {
        ext.args = "--FILTER-summary"
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        ANNOTATION
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.annotate){
        withName: "^.*:ANNOTATION:ENSEMBLVEP\$" {
            // errorStrategy = { task.exitStatus = 255 ? 'retry' : 'terminate' }
            // maxRetries = 3
            // container = {params.vep_cache ? "quay.io/biocontainers/ensembl-vep:${params.vep_version}--pl5321h4a94de4_${task.attempt - 1}" : "nfcore/vep:${params.vep_version}.${params.genome}"}
            container = "nfcore/vep:${params.vep_version}.${params.genome}"
            ext.args = {[
                // select the chromosomes to run on
                "--chr ${meta.regions}",
                // don't contact external db
                '--offline',
                // increase buffer_size to speed up analysis
                '--buffer_size 100000',
                // output format options
                '--vcf --compress_output bgzip --force_overwrite',
                // annotation options
                '--variant_class --sift b --polyphen b --humdiv --allele_number --numbers --total_length --gene_phenotype --ccds --regulatory',
                // identifiers
                '--hgvs --hgvsg --shift_hgvs 1 --protein --symbol --ccds --uniprot --tsl --appris --canonical --mane --biotype --domains',
                // co-located variant info
                '--check_existing --clin_sig_allele 1 --af --max_af --af_1kg --af_gnomad --pubmed --var_synonyms',
                // plugins
                (params.vep_dbnsfp)         ? "--plugin dbNSFP,${params.dbnsfp.split('/')[-1]},Ensembl_geneid,Ensembl_transcriptid,LRT_score,LRT_pred,MutationTaster_score,MutationTaster_pred,MutationAssessor_score,MutationAssessor_pred,PROVEAN_score,PROVEAN_pred,MetaSVM_score,MetaSVM_pred,MetaLR_score,MetaLR_pred,MetaRNN_score,MetaRNN_pred,M-CAP_score,M-CAP_pred,REVEL_score,BayesDel_addAF_score,BayesDel_addAF_pred,BayesDel_noAF_score,BayesDel_noAF_pred,CADD_phred,DANN_score,fathmm-MKL_coding_score,fathmm-MKL_coding_pred,GenoCanyon_score,gnomAD_exomes_AC,gnomAD_exomes_AN,gnomAD_exomes_AF,gnomAD_exomes_nhomalt,gnomAD_exomes_POPMAX_AF,gnomAD_genomes_AC,gnomAD_genomes_AN,gnomAD_genomes_AF,gnomAD_genomes_nhomalt,gnomAD_genomes_POPMAX_AF,Interpro_domain" : '',
                (params.vep_spliceai)       ? "--plugin SpliceAI,snv=${params.spliceai_snv.split('/')[-1]},indel=${params.spliceai_indel.split('/')[-1]}" : '',
                (params.vep_spliceregion)   ? '--plugin SpliceRegion' : '',
                (params.vep_mastermind)     ? "--plugin Mastermind,${params.mastermind.split('/')[-1]}" : '',
                (params.vep_maxentscan)     ? "--plugin MaxEntScan,${params.maxentscan.split('/')[-1]}" : '',
                (params.vep_eog)            ? "--custom ${params.eog.split('/')[-1]},EOG,vcf,overlap,0,AF" : '',
                (params.vep_merged)         ? '--merged' : '',
            ].join(' ').trim()}
        }

        withName: ".*:ANNOTATION:BCFTOOLS_CONCAT\$" {
            publishDir = [
                enabled: params.vcfanno ? false : true,
                overwrite: true,
                path: { "${params.outdir}/${final_output}/${meta.family}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.family}.ann.vcf.gz" }
            ] // SAVE
        }

        if (params.vcfanno){
            withName: "^.*:ANNOTATION:BGZIP_ANNOTATED_VCFS\$" {
                publishDir = [
                    overwrite: true,
                    path: { "${params.outdir}/${final_output}/${meta.family}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.family}.ann.vcf.gz" }
                ] // SAVE
            }
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        FINAL PROCESSES
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.gemini){
        withName: VCF2DB{
            publishDir = [
                overwrite: true,
                path: { "${params.outdir}/${final_output}/${meta.family ?: meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
        }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    withName: MULTIQC {
        publishDir = [
            overwrite: true,
            path: { "${params.outdir}/multiqc_reports" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE => Fix the location problem
        errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args      = { params.multiqc_config ? "--config $multiqc_custom_config" : "" }
    }

}
